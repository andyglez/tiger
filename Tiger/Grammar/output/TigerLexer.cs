//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g 2017-02-22 16:59:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Tiger 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
 internal  partial class TigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ALIAS_DECLARATION=4;
	public const int AND=5;
	public const int ARRAY=6;
	public const int ARRAY_ACCESS=7;
	public const int ARRAY_CREATION=8;
	public const int ARRAY_DECLARATION=9;
	public const int ASG=10;
	public const int BACKSLASH=11;
	public const int BREAK=12;
	public const int COMMA=13;
	public const int COMMENT=14;
	public const int DDOT=15;
	public const int DIFF=16;
	public const int DIGIT=17;
	public const int DO=18;
	public const int DOT=19;
	public const int ELSE=20;
	public const int END=21;
	public const int EQUAL=22;
	public const int ESC_SEQ=23;
	public const int EXPRESSION_LIST=24;
	public const int FIELD_INIT_PAIR=25;
	public const int FOR=26;
	public const int FOR_VAR_DECLARATION=27;
	public const int FUNCTION=28;
	public const int FUNCTION_ARGS_DECLARATIONS=29;
	public const int FUNCTION_CALL=30;
	public const int FUNCTION_CALL_ARGS=31;
	public const int FUNCTION_DECLARATION=32;
	public const int FUNCTION_DECLARATION_SEQUENCE=33;
	public const int FUNCTION_VAR_TYPE_DECLARATION=34;
	public const int GETHAN=35;
	public const int GTHAN=36;
	public const int HEX_DIGIT=37;
	public const int ID=38;
	public const int IF=39;
	public const int IF_THEN=40;
	public const int IF_THEN_ELSE=41;
	public const int IN=42;
	public const int INT=43;
	public const int LBRACK=44;
	public const int LET=45;
	public const int LETHAN=46;
	public const int LETTER=47;
	public const int LET_DECLARATIONS=48;
	public const int LET_IN_END=49;
	public const int LET_VAR_DECLARATION=50;
	public const int LKEY=51;
	public const int LPAR=52;
	public const int LTHAN=53;
	public const int MINUS=54;
	public const int MINUS_EXPRESSION=55;
	public const int NIL=56;
	public const int OF=57;
	public const int OR=58;
	public const int PLUS=59;
	public const int QUOTE=60;
	public const int RBRACK=61;
	public const int RECORDS_CREATION_FIELDS=62;
	public const int RECORDS_FIELDS_DECLARATIONS=63;
	public const int RECORD_CREATION=64;
	public const int RECORD_FIELD_ACCESS=65;
	public const int RECORD_TYPE_DECLARATION=66;
	public const int RECORD_VAR_DECLARATION=67;
	public const int RKEY=68;
	public const int RPAR=69;
	public const int SEMI=70;
	public const int SLASH=71;
	public const int STAR=72;
	public const int STRING=73;
	public const int THEN=74;
	public const int TO=75;
	public const int TYPE=76;
	public const int TYPE_DECLARATION_SEQUENCE=77;
	public const int VAR=78;
	public const int VARIABLE_DECLARATION_SEQUENCE=79;
	public const int VARIABLE_GET=80;
	public const int WHILE=81;
	public const int WS=82;
	 
	public override string GetErrorMessage( RecognitionException e, string[] token)
	{
	    string message = base.GetErrorMessage(e, token);
	    Errors.Add(new Error(e,message));
	    return message;
	}
	public int HIDDEN{get{return Hidden;}}
	public List<Error> Errors { get; set; }


    // delegates
    // delegators

	 public  TigerLexer()
	{
		OnCreated();
	}

	 public  TigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	 public  TigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:30:5: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:30:7: '&'
			{
			DebugLocation(30, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ARRAY();
	partial void LeaveRule_ARRAY();

	// $ANTLR start "ARRAY"
	[GrammarRule("ARRAY")]
	private void mARRAY()
	{
		EnterRule_ARRAY();
		EnterRule("ARRAY", 2);
		TraceIn("ARRAY", 2);
		try
		{
			int _type = ARRAY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:31:7: ( 'array' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:31:9: 'array'
			{
			DebugLocation(31, 9);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARRAY", 2);
			LeaveRule("ARRAY", 2);
			LeaveRule_ARRAY();
		}
	}
	// $ANTLR end "ARRAY"

	partial void EnterRule_ASG();
	partial void LeaveRule_ASG();

	// $ANTLR start "ASG"
	[GrammarRule("ASG")]
	private void mASG()
	{
		EnterRule_ASG();
		EnterRule("ASG", 3);
		TraceIn("ASG", 3);
		try
		{
			int _type = ASG;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:32:5: ( ':=' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:32:7: ':='
			{
			DebugLocation(32, 7);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASG", 3);
			LeaveRule("ASG", 3);
			LeaveRule_ASG();
		}
	}
	// $ANTLR end "ASG"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 4);
		TraceIn("BREAK", 4);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:33:7: ( 'break' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:33:9: 'break'
			{
			DebugLocation(33, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 4);
			LeaveRule("BREAK", 4);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 5);
		TraceIn("COMMA", 5);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:34:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:34:9: ','
			{
			DebugLocation(34, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 5);
			LeaveRule("COMMA", 5);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_DDOT();
	partial void LeaveRule_DDOT();

	// $ANTLR start "DDOT"
	[GrammarRule("DDOT")]
	private void mDDOT()
	{
		EnterRule_DDOT();
		EnterRule("DDOT", 6);
		TraceIn("DDOT", 6);
		try
		{
			int _type = DDOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:35:6: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:35:8: ':'
			{
			DebugLocation(35, 8);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DDOT", 6);
			LeaveRule("DDOT", 6);
			LeaveRule_DDOT();
		}
	}
	// $ANTLR end "DDOT"

	partial void EnterRule_DIFF();
	partial void LeaveRule_DIFF();

	// $ANTLR start "DIFF"
	[GrammarRule("DIFF")]
	private void mDIFF()
	{
		EnterRule_DIFF();
		EnterRule("DIFF", 7);
		TraceIn("DIFF", 7);
		try
		{
			int _type = DIFF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:36:6: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:36:8: '<>'
			{
			DebugLocation(36, 8);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIFF", 7);
			LeaveRule("DIFF", 7);
			LeaveRule_DIFF();
		}
	}
	// $ANTLR end "DIFF"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 8);
		TraceIn("DO", 8);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:37:4: ( 'do' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:37:6: 'do'
			{
			DebugLocation(37, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 8);
			LeaveRule("DO", 8);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 9);
		TraceIn("DOT", 9);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:38:5: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:38:7: '.'
			{
			DebugLocation(38, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 9);
			LeaveRule("DOT", 9);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 10);
		TraceIn("ELSE", 10);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:39:6: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:39:8: 'else'
			{
			DebugLocation(39, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 10);
			LeaveRule("ELSE", 10);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 11);
		TraceIn("END", 11);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:40:5: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:40:7: 'end'
			{
			DebugLocation(40, 7);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 11);
			LeaveRule("END", 11);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 12);
		TraceIn("EQUAL", 12);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:41:7: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:41:9: '='
			{
			DebugLocation(41, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 12);
			LeaveRule("EQUAL", 12);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 13);
		TraceIn("FOR", 13);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:42:5: ( 'for' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:42:7: 'for'
			{
			DebugLocation(42, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 13);
			LeaveRule("FOR", 13);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 14);
		TraceIn("FUNCTION", 14);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:43:10: ( 'function' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:43:12: 'function'
			{
			DebugLocation(43, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 14);
			LeaveRule("FUNCTION", 14);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_GETHAN();
	partial void LeaveRule_GETHAN();

	// $ANTLR start "GETHAN"
	[GrammarRule("GETHAN")]
	private void mGETHAN()
	{
		EnterRule_GETHAN();
		EnterRule("GETHAN", 15);
		TraceIn("GETHAN", 15);
		try
		{
			int _type = GETHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:44:8: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:44:10: '>='
			{
			DebugLocation(44, 10);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GETHAN", 15);
			LeaveRule("GETHAN", 15);
			LeaveRule_GETHAN();
		}
	}
	// $ANTLR end "GETHAN"

	partial void EnterRule_GTHAN();
	partial void LeaveRule_GTHAN();

	// $ANTLR start "GTHAN"
	[GrammarRule("GTHAN")]
	private void mGTHAN()
	{
		EnterRule_GTHAN();
		EnterRule("GTHAN", 16);
		TraceIn("GTHAN", 16);
		try
		{
			int _type = GTHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:45:7: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:45:9: '>'
			{
			DebugLocation(45, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GTHAN", 16);
			LeaveRule("GTHAN", 16);
			LeaveRule_GTHAN();
		}
	}
	// $ANTLR end "GTHAN"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 17);
		TraceIn("IF", 17);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:46:4: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:46:6: 'if'
			{
			DebugLocation(46, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 17);
			LeaveRule("IF", 17);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 18);
		TraceIn("IN", 18);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:47:4: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:47:6: 'in'
			{
			DebugLocation(47, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 18);
			LeaveRule("IN", 18);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_LBRACK();
	partial void LeaveRule_LBRACK();

	// $ANTLR start "LBRACK"
	[GrammarRule("LBRACK")]
	private void mLBRACK()
	{
		EnterRule_LBRACK();
		EnterRule("LBRACK", 19);
		TraceIn("LBRACK", 19);
		try
		{
			int _type = LBRACK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:48:8: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:48:10: '['
			{
			DebugLocation(48, 10);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACK", 19);
			LeaveRule("LBRACK", 19);
			LeaveRule_LBRACK();
		}
	}
	// $ANTLR end "LBRACK"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 20);
		TraceIn("LET", 20);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:49:5: ( 'let' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:49:7: 'let'
			{
			DebugLocation(49, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 20);
			LeaveRule("LET", 20);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LETHAN();
	partial void LeaveRule_LETHAN();

	// $ANTLR start "LETHAN"
	[GrammarRule("LETHAN")]
	private void mLETHAN()
	{
		EnterRule_LETHAN();
		EnterRule("LETHAN", 21);
		TraceIn("LETHAN", 21);
		try
		{
			int _type = LETHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:50:8: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:50:10: '<='
			{
			DebugLocation(50, 10);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LETHAN", 21);
			LeaveRule("LETHAN", 21);
			LeaveRule_LETHAN();
		}
	}
	// $ANTLR end "LETHAN"

	partial void EnterRule_LKEY();
	partial void LeaveRule_LKEY();

	// $ANTLR start "LKEY"
	[GrammarRule("LKEY")]
	private void mLKEY()
	{
		EnterRule_LKEY();
		EnterRule("LKEY", 22);
		TraceIn("LKEY", 22);
		try
		{
			int _type = LKEY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:51:6: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:51:8: '{'
			{
			DebugLocation(51, 8);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LKEY", 22);
			LeaveRule("LKEY", 22);
			LeaveRule_LKEY();
		}
	}
	// $ANTLR end "LKEY"

	partial void EnterRule_LPAR();
	partial void LeaveRule_LPAR();

	// $ANTLR start "LPAR"
	[GrammarRule("LPAR")]
	private void mLPAR()
	{
		EnterRule_LPAR();
		EnterRule("LPAR", 23);
		TraceIn("LPAR", 23);
		try
		{
			int _type = LPAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:52:6: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:52:8: '('
			{
			DebugLocation(52, 8);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAR", 23);
			LeaveRule("LPAR", 23);
			LeaveRule_LPAR();
		}
	}
	// $ANTLR end "LPAR"

	partial void EnterRule_LTHAN();
	partial void LeaveRule_LTHAN();

	// $ANTLR start "LTHAN"
	[GrammarRule("LTHAN")]
	private void mLTHAN()
	{
		EnterRule_LTHAN();
		EnterRule("LTHAN", 24);
		TraceIn("LTHAN", 24);
		try
		{
			int _type = LTHAN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:53:7: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:53:9: '<'
			{
			DebugLocation(53, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LTHAN", 24);
			LeaveRule("LTHAN", 24);
			LeaveRule_LTHAN();
		}
	}
	// $ANTLR end "LTHAN"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 25);
		TraceIn("MINUS", 25);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:54:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:54:9: '-'
			{
			DebugLocation(54, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 25);
			LeaveRule("MINUS", 25);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 26);
		TraceIn("NIL", 26);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:55:5: ( 'nil' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:55:7: 'nil'
			{
			DebugLocation(55, 7);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 26);
			LeaveRule("NIL", 26);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 27);
		TraceIn("OF", 27);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:56:4: ( 'of' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:56:6: 'of'
			{
			DebugLocation(56, 6);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 27);
			LeaveRule("OF", 27);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 28);
		TraceIn("OR", 28);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:57:4: ( '|' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:57:6: '|'
			{
			DebugLocation(57, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 28);
			LeaveRule("OR", 28);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 29);
		TraceIn("PLUS", 29);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:58:6: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:58:8: '+'
			{
			DebugLocation(58, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 29);
			LeaveRule("PLUS", 29);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_RBRACK();
	partial void LeaveRule_RBRACK();

	// $ANTLR start "RBRACK"
	[GrammarRule("RBRACK")]
	private void mRBRACK()
	{
		EnterRule_RBRACK();
		EnterRule("RBRACK", 30);
		TraceIn("RBRACK", 30);
		try
		{
			int _type = RBRACK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:59:8: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:59:10: ']'
			{
			DebugLocation(59, 10);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACK", 30);
			LeaveRule("RBRACK", 30);
			LeaveRule_RBRACK();
		}
	}
	// $ANTLR end "RBRACK"

	partial void EnterRule_RKEY();
	partial void LeaveRule_RKEY();

	// $ANTLR start "RKEY"
	[GrammarRule("RKEY")]
	private void mRKEY()
	{
		EnterRule_RKEY();
		EnterRule("RKEY", 31);
		TraceIn("RKEY", 31);
		try
		{
			int _type = RKEY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:60:6: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:60:8: '}'
			{
			DebugLocation(60, 8);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RKEY", 31);
			LeaveRule("RKEY", 31);
			LeaveRule_RKEY();
		}
	}
	// $ANTLR end "RKEY"

	partial void EnterRule_RPAR();
	partial void LeaveRule_RPAR();

	// $ANTLR start "RPAR"
	[GrammarRule("RPAR")]
	private void mRPAR()
	{
		EnterRule_RPAR();
		EnterRule("RPAR", 32);
		TraceIn("RPAR", 32);
		try
		{
			int _type = RPAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:61:6: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:61:8: ')'
			{
			DebugLocation(61, 8);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAR", 32);
			LeaveRule("RPAR", 32);
			LeaveRule_RPAR();
		}
	}
	// $ANTLR end "RPAR"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 33);
		TraceIn("SEMI", 33);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:62:6: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:62:8: ';'
			{
			DebugLocation(62, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 33);
			LeaveRule("SEMI", 33);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_SLASH();
	partial void LeaveRule_SLASH();

	// $ANTLR start "SLASH"
	[GrammarRule("SLASH")]
	private void mSLASH()
	{
		EnterRule_SLASH();
		EnterRule("SLASH", 34);
		TraceIn("SLASH", 34);
		try
		{
			int _type = SLASH;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:63:7: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:63:9: '/'
			{
			DebugLocation(63, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SLASH", 34);
			LeaveRule("SLASH", 34);
			LeaveRule_SLASH();
		}
	}
	// $ANTLR end "SLASH"

	partial void EnterRule_STAR();
	partial void LeaveRule_STAR();

	// $ANTLR start "STAR"
	[GrammarRule("STAR")]
	private void mSTAR()
	{
		EnterRule_STAR();
		EnterRule("STAR", 35);
		TraceIn("STAR", 35);
		try
		{
			int _type = STAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:64:6: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:64:8: '*'
			{
			DebugLocation(64, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR", 35);
			LeaveRule("STAR", 35);
			LeaveRule_STAR();
		}
	}
	// $ANTLR end "STAR"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 36);
		TraceIn("THEN", 36);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:65:6: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:65:8: 'then'
			{
			DebugLocation(65, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 36);
			LeaveRule("THEN", 36);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 37);
		TraceIn("TO", 37);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:66:4: ( 'to' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:66:6: 'to'
			{
			DebugLocation(66, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 37);
			LeaveRule("TO", 37);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 38);
		TraceIn("TYPE", 38);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:67:6: ( 'type' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:67:8: 'type'
			{
			DebugLocation(67, 8);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 38);
			LeaveRule("TYPE", 38);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 39);
		TraceIn("VAR", 39);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:68:5: ( 'var' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:68:7: 'var'
			{
			DebugLocation(68, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 39);
			LeaveRule("VAR", 39);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 40);
		TraceIn("WHILE", 40);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:69:7: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:69:9: 'while'
			{
			DebugLocation(69, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 40);
			LeaveRule("WHILE", 40);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 41);
		TraceIn("LETTER", 41);
		try
		{
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:166:17: ( 'a' .. 'z' | 'A' .. 'Z' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:
			{
			DebugLocation(166, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 41);
			LeaveRule("LETTER", 41);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 42);
		TraceIn("DIGIT", 42);
		try
		{
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:167:17: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:
			{
			DebugLocation(167, 17);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 42);
			LeaveRule("DIGIT", 42);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 43);
		TraceIn("ID", 43);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:169:5: ( LETTER ( LETTER | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:169:7: LETTER ( LETTER | DIGIT | '_' )*
			{
			DebugLocation(169, 7);
			mLETTER(); 
			DebugLocation(169, 14);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:169:14: ( LETTER | DIGIT | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:
					{
					DebugLocation(169, 14);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 43);
			LeaveRule("ID", 43);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 44);
		TraceIn("INT", 44);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:171:5: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:171:7: ( DIGIT )+
			{
			DebugLocation(171, 7);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:171:7: ( DIGIT )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:
					{
					DebugLocation(171, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 44);
			LeaveRule("INT", 44);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 45);
		TraceIn("COMMENT", 45);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:174:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0=='/'))
			{
				int LA6_1 = input.LA(2);

				if ((LA6_1=='/'))
				{
					alt6 = 1;
				}
				else if ((LA6_1=='*'))
				{
					alt6 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:174:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(174, 9);
				Match("//"); 

				DebugLocation(174, 14);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:174:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='\u0000' && LA3_0<='\t')||(LA3_0>='\u000B' && LA3_0<='\f')||(LA3_0>='\u000E' && LA3_0<='\uFFFF')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:
						{
						DebugLocation(174, 14);
						input.Consume();


						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(174, 28);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:174:28: ( '\\r' )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0=='\r'))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:174:28: '\\r'
					{
					DebugLocation(174, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(174, 34);
				Match('\n'); 
				DebugLocation(174, 39);
				_channel=HIDDEN;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:175:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(175, 9);
				Match("/*"); 

				DebugLocation(175, 14);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:175:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0=='*'))
					{
						int LA5_1 = input.LA(2);

						if ((LA5_1=='/'))
						{
							alt5 = 2;
						}
						else if (((LA5_1>='\u0000' && LA5_1<='.')||(LA5_1>='0' && LA5_1<='\uFFFF')))
						{
							alt5 = 1;
						}


					}
					else if (((LA5_0>='\u0000' && LA5_0<=')')||(LA5_0>='+' && LA5_0<='\uFFFF')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:175:42: .
						{
						DebugLocation(175, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(175, 47);
				Match("*/"); 

				DebugLocation(175, 52);
				_channel=HIDDEN;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 45);
			LeaveRule("COMMENT", 45);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 46);
		TraceIn("WS", 46);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:178:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:178:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(178, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(182, 11);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 46);
			LeaveRule("WS", 46);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_BACKSLASH();
	partial void LeaveRule_BACKSLASH();

	// $ANTLR start "BACKSLASH"
	[GrammarRule("BACKSLASH")]
	private void mBACKSLASH()
	{
		EnterRule_BACKSLASH();
		EnterRule("BACKSLASH", 47);
		TraceIn("BACKSLASH", 47);
		try
		{
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:185:20: ( '\\\\' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:185:22: '\\\\'
			{
			DebugLocation(185, 22);
			Match('\\'); 

			}

		}
		finally
		{
			TraceOut("BACKSLASH", 47);
			LeaveRule("BACKSLASH", 47);
			LeaveRule_BACKSLASH();
		}
	}
	// $ANTLR end "BACKSLASH"

	partial void EnterRule_QUOTE();
	partial void LeaveRule_QUOTE();

	// $ANTLR start "QUOTE"
	[GrammarRule("QUOTE")]
	private void mQUOTE()
	{
		EnterRule_QUOTE();
		EnterRule("QUOTE", 48);
		TraceIn("QUOTE", 48);
		try
		{
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:186:20: ( '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:186:22: '\"'
			{
			DebugLocation(186, 22);
			Match('\"'); 

			}

		}
		finally
		{
			TraceOut("QUOTE", 48);
			LeaveRule("QUOTE", 48);
			LeaveRule_QUOTE();
		}
	}
	// $ANTLR end "QUOTE"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 49);
		TraceIn("STRING", 49);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:189:5: ( QUOTE ( ESC_SEQ |~ ( BACKSLASH | QUOTE ) )* QUOTE )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:189:8: QUOTE ( ESC_SEQ |~ ( BACKSLASH | QUOTE ) )* QUOTE
			{
			DebugLocation(189, 8);
			mQUOTE(); 
			DebugLocation(189, 14);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:189:14: ( ESC_SEQ |~ ( BACKSLASH | QUOTE ) )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=3;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='\\'))
				{
					alt7 = 1;
				}
				else if (((LA7_0>='\u0000' && LA7_0<='!')||(LA7_0>='#' && LA7_0<='[')||(LA7_0>=']' && LA7_0<='\uFFFF')))
				{
					alt7 = 2;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:189:16: ESC_SEQ
					{
					DebugLocation(189, 16);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:189:26: ~ ( BACKSLASH | QUOTE )
					{
					DebugLocation(189, 26);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(189, 48);
			mQUOTE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 49);
			LeaveRule("STRING", 49);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 50);
		TraceIn("HEX_DIGIT", 50);
		try
		{
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:194:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:
			{
			DebugLocation(194, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 50);
			LeaveRule("HEX_DIGIT", 50);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 51);
		TraceIn("ESC_SEQ", 51);
		try
		{
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:198:5: ( BACKSLASH ( 'n' | 'r' | 't' | '\"' | BACKSLASH | '^' ( '@' | 'A' .. 'Z' | '[' | '\\\\' | ']' | '^' | '_' ) | DIGIT DIGIT DIGIT | ( WS )+ BACKSLASH ) )
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:198:9: BACKSLASH ( 'n' | 'r' | 't' | '\"' | BACKSLASH | '^' ( '@' | 'A' .. 'Z' | '[' | '\\\\' | ']' | '^' | '_' ) | DIGIT DIGIT DIGIT | ( WS )+ BACKSLASH )
			{
			DebugLocation(198, 9);
			mBACKSLASH(); 
			DebugLocation(199, 6);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:199:6: ( 'n' | 'r' | 't' | '\"' | BACKSLASH | '^' ( '@' | 'A' .. 'Z' | '[' | '\\\\' | ']' | '^' | '_' ) | DIGIT DIGIT DIGIT | ( WS )+ BACKSLASH )
			int alt9=8;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt9 = 1;
				}
				break;
			case 'r':
				{
				alt9 = 2;
				}
				break;
			case 't':
				{
				alt9 = 3;
				}
				break;
			case '\"':
				{
				alt9 = 4;
				}
				break;
			case '\\':
				{
				alt9 = 5;
				}
				break;
			case '^':
				{
				alt9 = 6;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt9 = 7;
				}
				break;
			case '\t':
			case '\n':
			case '\r':
			case ' ':
				{
				alt9 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:199:7: 'n'
				{
				DebugLocation(199, 7);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:200:7: 'r'
				{
				DebugLocation(200, 7);
				Match('r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:201:7: 't'
				{
				DebugLocation(201, 7);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:202:7: '\"'
				{
				DebugLocation(202, 7);
				Match('\"'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:203:7: BACKSLASH
				{
				DebugLocation(203, 7);
				mBACKSLASH(); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:204:7: '^' ( '@' | 'A' .. 'Z' | '[' | '\\\\' | ']' | '^' | '_' )
				{
				DebugLocation(204, 7);
				Match('^'); 
				DebugLocation(204, 10);
				input.Consume();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:205:7: DIGIT DIGIT DIGIT
				{
				DebugLocation(205, 7);
				mDIGIT(); 
				DebugLocation(205, 13);
				mDIGIT(); 
				DebugLocation(205, 19);
				mDIGIT(); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:206:7: ( WS )+ BACKSLASH
				{
				DebugLocation(206, 7);
				// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:206:7: ( WS )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>='\t' && LA8_0<='\n')||LA8_0=='\r'||LA8_0==' '))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:206:8: WS
						{
						DebugLocation(206, 8);
						mWS(); 

						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(206, 13);
				mBACKSLASH(); 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			}

		}
		finally
		{
			TraceOut("ESC_SEQ", 51);
			LeaveRule("ESC_SEQ", 51);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	public override void mTokens()
	{
		// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:8: ( AND | ARRAY | ASG | BREAK | COMMA | DDOT | DIFF | DO | DOT | ELSE | END | EQUAL | FOR | FUNCTION | GETHAN | GTHAN | IF | IN | LBRACK | LET | LETHAN | LKEY | LPAR | LTHAN | MINUS | NIL | OF | OR | PLUS | RBRACK | RKEY | RPAR | SEMI | SLASH | STAR | THEN | TO | TYPE | VAR | WHILE | ID | INT | COMMENT | WS | STRING )
		int alt10=45;
		try { DebugEnterDecision(10, false);
		try
		{
			alt10 = dfa10.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(10); }
		switch (alt10)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:14: ARRAY
			{
			DebugLocation(1, 14);
			mARRAY(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:20: ASG
			{
			DebugLocation(1, 20);
			mASG(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:24: BREAK
			{
			DebugLocation(1, 24);
			mBREAK(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:30: COMMA
			{
			DebugLocation(1, 30);
			mCOMMA(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:36: DDOT
			{
			DebugLocation(1, 36);
			mDDOT(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:41: DIFF
			{
			DebugLocation(1, 41);
			mDIFF(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:46: DO
			{
			DebugLocation(1, 46);
			mDO(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:49: DOT
			{
			DebugLocation(1, 49);
			mDOT(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:53: ELSE
			{
			DebugLocation(1, 53);
			mELSE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:58: END
			{
			DebugLocation(1, 58);
			mEND(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:62: EQUAL
			{
			DebugLocation(1, 62);
			mEQUAL(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:68: FOR
			{
			DebugLocation(1, 68);
			mFOR(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:72: FUNCTION
			{
			DebugLocation(1, 72);
			mFUNCTION(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:81: GETHAN
			{
			DebugLocation(1, 81);
			mGETHAN(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:88: GTHAN
			{
			DebugLocation(1, 88);
			mGTHAN(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:94: IF
			{
			DebugLocation(1, 94);
			mIF(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:97: IN
			{
			DebugLocation(1, 97);
			mIN(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:100: LBRACK
			{
			DebugLocation(1, 100);
			mLBRACK(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:107: LET
			{
			DebugLocation(1, 107);
			mLET(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:111: LETHAN
			{
			DebugLocation(1, 111);
			mLETHAN(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:118: LKEY
			{
			DebugLocation(1, 118);
			mLKEY(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:123: LPAR
			{
			DebugLocation(1, 123);
			mLPAR(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:128: LTHAN
			{
			DebugLocation(1, 128);
			mLTHAN(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:134: MINUS
			{
			DebugLocation(1, 134);
			mMINUS(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:140: NIL
			{
			DebugLocation(1, 140);
			mNIL(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:144: OF
			{
			DebugLocation(1, 144);
			mOF(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:147: OR
			{
			DebugLocation(1, 147);
			mOR(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:150: PLUS
			{
			DebugLocation(1, 150);
			mPLUS(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:155: RBRACK
			{
			DebugLocation(1, 155);
			mRBRACK(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:162: RKEY
			{
			DebugLocation(1, 162);
			mRKEY(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:167: RPAR
			{
			DebugLocation(1, 167);
			mRPAR(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:172: SEMI
			{
			DebugLocation(1, 172);
			mSEMI(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:177: SLASH
			{
			DebugLocation(1, 177);
			mSLASH(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:183: STAR
			{
			DebugLocation(1, 183);
			mSTAR(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:188: THEN
			{
			DebugLocation(1, 188);
			mTHEN(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:193: TO
			{
			DebugLocation(1, 193);
			mTO(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:196: TYPE
			{
			DebugLocation(1, 196);
			mTYPE(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:201: VAR
			{
			DebugLocation(1, 201);
			mVAR(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:205: WHILE
			{
			DebugLocation(1, 205);
			mWHILE(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:211: ID
			{
			DebugLocation(1, 211);
			mID(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:214: INT
			{
			DebugLocation(1, 214);
			mINT(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:218: COMMENT
			{
			DebugLocation(1, 218);
			mCOMMENT(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:226: WS
			{
			DebugLocation(1, 226);
			mWS(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\Cesar\\Desktop\\TIGER-AndyGonzalez(C412)-YamileReynoso(C412)\\Codigo\\Tiger\\Tiger\\Grammar\\Tiger.g:1:229: STRING
			{
			DebugLocation(1, 229);
			mSTRING(); 

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x2\xFFFF\x1\x20\x1\x26\x1\x20\x1\xFFFF\x1\x2A\x1\x20\x1\xFFFF\x1\x20"+
			"\x1\xFFFF\x1\x20\x1\x31\x1\x20\x1\xFFFF\x1\x20\x3\xFFFF\x2\x20\x6\xFFFF"+
			"\x1\x38\x1\xFFFF\x3\x20\x4\xFFFF\x1\x20\x2\xFFFF\x1\x20\x3\xFFFF\x1\x40"+
			"\x4\x20\x2\xFFFF\x1\x45\x1\x46\x2\x20\x1\x49\x2\xFFFF\x1\x20\x1\x4B\x5"+
			"\x20\x1\xFFFF\x1\x20\x1\x52\x1\x53\x1\x20\x2\xFFFF\x1\x55\x1\x56\x1\xFFFF"+
			"\x1\x20\x1\xFFFF\x1\x20\x1\x59\x3\x20\x1\x5D\x2\xFFFF\x1\x20\x2\xFFFF"+
			"\x1\x5F\x1\x60\x1\xFFFF\x1\x20\x1\x62\x1\x63\x1\xFFFF\x1\x20\x2\xFFFF"+
			"\x1\x65\x2\xFFFF\x1\x20\x1\xFFFF\x1\x20\x1\x68\x1\xFFFF";
		private const string DFA10_eofS =
			"\x69\xFFFF";
		private const string DFA10_minS =
			"\x1\x9\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x1\xFFFF\x1\x3D\x1\x6F\x1\xFFFF"+
			"\x1\x6C\x1\xFFFF\x1\x6F\x1\x3D\x1\x66\x1\xFFFF\x1\x65\x3\xFFFF\x1\x69"+
			"\x1\x66\x6\xFFFF\x1\x2A\x1\xFFFF\x1\x68\x1\x61\x1\x68\x4\xFFFF\x1\x72"+
			"\x2\xFFFF\x1\x65\x3\xFFFF\x1\x30\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF"+
			"\x2\x30\x1\x74\x1\x6C\x1\x30\x2\xFFFF\x1\x65\x1\x30\x1\x70\x1\x72\x1"+
			"\x69\x2\x61\x1\xFFFF\x1\x65\x2\x30\x1\x63\x2\xFFFF\x2\x30\x1\xFFFF\x1"+
			"\x6E\x1\xFFFF\x1\x65\x1\x30\x1\x6C\x1\x79\x1\x6B\x1\x30\x2\xFFFF\x1\x74"+
			"\x2\xFFFF\x2\x30\x1\xFFFF\x1\x65\x2\x30\x1\xFFFF\x1\x69\x2\xFFFF\x1\x30"+
			"\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x6E\x1\x30\x1\xFFFF";
		private const string DFA10_maxS =
			"\x1\x7D\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x1\xFFFF\x1\x3E\x1\x6F\x1\xFFFF"+
			"\x1\x6E\x1\xFFFF\x1\x75\x1\x3D\x1\x6E\x1\xFFFF\x1\x65\x3\xFFFF\x1\x69"+
			"\x1\x66\x6\xFFFF\x1\x2F\x1\xFFFF\x1\x79\x1\x61\x1\x68\x4\xFFFF\x1\x72"+
			"\x2\xFFFF\x1\x65\x3\xFFFF\x1\x7A\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF"+
			"\x2\x7A\x1\x74\x1\x6C\x1\x7A\x2\xFFFF\x1\x65\x1\x7A\x1\x70\x1\x72\x1"+
			"\x69\x2\x61\x1\xFFFF\x1\x65\x2\x7A\x1\x63\x2\xFFFF\x2\x7A\x1\xFFFF\x1"+
			"\x6E\x1\xFFFF\x1\x65\x1\x7A\x1\x6C\x1\x79\x1\x6B\x1\x7A\x2\xFFFF\x1\x74"+
			"\x2\xFFFF\x2\x7A\x1\xFFFF\x1\x65\x2\x7A\x1\xFFFF\x1\x69\x2\xFFFF\x1\x7A"+
			"\x2\xFFFF\x1\x6F\x1\xFFFF\x1\x6E\x1\x7A\x1\xFFFF";
		private const string DFA10_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x5\x2\xFFFF\x1\x9\x1\xFFFF\x1\xC\x3\xFFFF"+
			"\x1\x13\x1\xFFFF\x1\x16\x1\x17\x1\x19\x2\xFFFF\x1\x1C\x1\x1D\x1\x1E\x1"+
			"\x1F\x1\x20\x1\x21\x1\xFFFF\x1\x23\x3\xFFFF\x1\x29\x1\x2A\x1\x2C\x1\x2D"+
			"\x1\xFFFF\x1\x3\x1\x6\x1\xFFFF\x1\x7\x1\x15\x1\x18\x5\xFFFF\x1\xF\x1"+
			"\x10\x5\xFFFF\x1\x2B\x1\x22\x7\xFFFF\x1\x8\x4\xFFFF\x1\x11\x1\x12\x2"+
			"\xFFFF\x1\x1B\x1\xFFFF\x1\x25\x6\xFFFF\x1\xB\x1\xD\x1\xFFFF\x1\x14\x1"+
			"\x1A\x2\xFFFF\x1\x27\x3\xFFFF\x1\xA\x1\xFFFF\x1\x24\x1\x26\x1\xFFFF\x1"+
			"\x2\x1\x4\x1\xFFFF\x1\x28\x2\xFFFF\x1\xE";
		private const string DFA10_specialS =
			"\x69\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x2\x22\x2\xFFFF\x1\x22\x12\xFFFF\x1\x22\x1\xFFFF\x1\x23\x3\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x11\x1\x19\x1\x1C\x1\x16\x1\x5\x1\x12\x1\x8\x1\x1B\xA"+
				"\x21\x1\x3\x1\x1A\x1\x6\x1\xA\x1\xC\x2\xFFFF\x1A\x20\x1\xE\x1\xFFFF"+
				"\x1\x17\x3\xFFFF\x1\x2\x1\x4\x1\x20\x1\x7\x1\x9\x1\xB\x2\x20\x1\xD\x2"+
				"\x20\x1\xF\x1\x20\x1\x13\x1\x14\x4\x20\x1\x1D\x1\x20\x1\x1E\x1\x1F\x3"+
				"\x20\x1\x10\x1\x15\x1\x18",
				"",
				"\x1\x24",
				"\x1\x25",
				"\x1\x27",
				"",
				"\x1\x29\x1\x28",
				"\x1\x2B",
				"",
				"\x1\x2C\x1\xFFFF\x1\x2D",
				"",
				"\x1\x2E\x5\xFFFF\x1\x2F",
				"\x1\x30",
				"\x1\x32\x7\xFFFF\x1\x33",
				"",
				"\x1\x34",
				"",
				"",
				"",
				"\x1\x35",
				"\x1\x36",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x37\x4\xFFFF\x1\x37",
				"",
				"\x1\x39\x6\xFFFF\x1\x3A\x9\xFFFF\x1\x3B",
				"\x1\x3C",
				"\x1\x3D",
				"",
				"",
				"",
				"",
				"\x1\x3E",
				"",
				"",
				"\x1\x3F",
				"",
				"",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x47",
				"\x1\x48",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"",
				"\x1\x4A",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"",
				"\x1\x51",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x54",
				"",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x57",
				"",
				"\x1\x58",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"",
				"\x1\x5E",
				"",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x61",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x64",
				"",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"",
				"\x1\x66",
				"",
				"\x1\x67",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ARRAY | ASG | BREAK | COMMA | DDOT | DIFF | DO | DOT | ELSE | END | EQUAL | FOR | FUNCTION | GETHAN | GTHAN | IF | IN | LBRACK | LET | LETHAN | LKEY | LPAR | LTHAN | MINUS | NIL | OF | OR | PLUS | RBRACK | RKEY | RPAR | SEMI | SLASH | STAR | THEN | TO | TYPE | VAR | WHILE | ID | INT | COMMENT | WS | STRING );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Tiger 
